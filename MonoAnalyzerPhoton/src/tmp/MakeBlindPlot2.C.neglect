//
//  MakeBlindPlot2.c
//  
//
//  Created by Mai El Sawy on 7/24/18.
//
//

//#include <stdio.h>
#include <TH2F.h>
#include "TTree.h"
#include "TLine.h"
#include "TCanvas.h"
#include "TLegend.h"
#include "TMath.h"
#include <vector>
#include <utility>
#include <algorithm>

#include <cmath>

#include <TH2.h>
#include <TStyle.h>
#include <TCanvas.h>
#include "TFile.h"

#include "TH1F.h"

#include "TH3F.h"
#include "TVector3.h"
#include "TLorentzVector.h"
#include <time.h>
#include <iostream>
#include <fstream>
#include <sstream>


TH2F *MakeBlindPlotSig(TTree *Mono, int Unblind=3){
    // Unblind is 0 to show 5 regions, 1 to show 8, 2 to show full signal, 3 for MC
    TCanvas *c1=new TCanvas();
    
    //    double x[4]={0, 70, 85, 105};//original cuts
    // double y[4]={0, 14, 20, 60}; // original cuts
    double x[4]={0, 58, 73, 105};
    double y[4]={0, 9, 16, 60}; 
    double VetoX = 0.0;
    double VetoY = 0.0;
    
    double xbins[4] = {x[0]/100, x[1]/100, x[2]/100, x[3]/100};
    double ybins[4] = {y[0]/2, y[1]/2, y[2]/2, y[3]/2};
    
    TH2F *Plot=new TH2F("MonoPlot", "Data", 105, 0, 1.05, 60, 0, 30);
    Plot->SetXTitle("Frac51");
    Plot->SetYTitle("HighDeDx Significance");
    TH2F *Actual=new TH2F("MonoPlot_Actual", "Actual Count", 3, xbins, 3, ybins);
    for(int i=0; i<4; i++) ybins[i] += ybins[3]*0.05;
    TH2F *Expected=new TH2F("MonoPlot_Expected", "Expected Count", 3, xbins, 3, ybins);
    for(int i=0; i<4; i++) ybins[i] -= ybins[3]*0.05;
    
    float Run, Event, SatSubHits, SubHits, Dist, HIso, XYPar0, XYPar2, RZPar0, RZPar1, RZPar2,Eta, seedFrac, cand_e55, passHLT_Photon200;

    //evtPassesPho200L1,cand_pho200TrigCode ;
    vector<pair<float,float> > PointsSorted;

    
    Mono->SetBranchAddress("run", &Run);
    Mono->SetBranchAddress("event", &Event);
    Mono->SetBranchAddress("Dist", &Dist);
    Mono->SetBranchAddress("HIso", &HIso);
    Mono->SetBranchAddress("XYPar0", &XYPar0);
    Mono->SetBranchAddress("XYPar2", &XYPar2);
    Mono->SetBranchAddress("RZPar0", &RZPar0);
    Mono->SetBranchAddress("RZPar1", &RZPar1);
    Mono->SetBranchAddress("RZPar2", &RZPar2);
    Mono->SetBranchAddress("Eta", &Eta);
    Mono->SetBranchAddress("SatSubHits", &SatSubHits);
    Mono->SetBranchAddress("SubHits", &SubHits);
    Mono->SetBranchAddress("seedFrac", &seedFrac);
    Mono->SetBranchAddress("cand_e55", &cand_e55);
    Mono->SetBranchAddress("passHLT_Photon200", &passHLT_Photon200);
    //    Mono->SetBranchAddress("Photon165_HE10", &Photon165_HE10);
    //Mono->SetBranchAddress("evtPassesPho200L1",&evtPassesPho200L1);
    //Mono->SetBranchAddress("cand_pho200TrigCode",&cand_pho200TrigCode);
    
    //    Mono->Draw("Significance:seedFrac>>MonoPlot", ("HIso<10 && Dist<0.5 && abs(XYPar0)<0.6 && abs(RZPar0)<10 && abs(XYPar2)>1000 && abs(RZPar1)<999 && abs(RZPar2)<0.005"));

    int LastEvent=-1;
    
    for(int e=0; e < Mono->GetEntries(); e++){
       
        
        Mono->GetEntry(e);
       
        
        if((int)Event != LastEvent && PointsSorted.size()>0){ //new event. sort the points and fill.
       
            
            sort(PointsSorted.begin(), PointsSorted.end());
            for(int i=PointsSorted.size()-1; i>=0; i--){
       
                Plot->Fill(PointsSorted[i].second, PointsSorted[i].first);
                if(PointsSorted[i].second > VetoX && PointsSorted[i].first > VetoY) break;
            }
            PointsSorted.clear();
            LastEvent = Event;
        }
      
       
         if(!(
	
//		           evtPassesPho200L1 == 1 &&	
	      passHLT_Photon200 == 1 &&
	      //(cand_e55*(sin(2*atan(exp(-1*Eta))))) > 175 && 
//	    	    cand_pho200TrigCode == 1 &&
	    cand_e55 > 200 &&
            Dist < 0.5  &&
	    HIso < 10 &&
	    abs(XYPar0) < 0.6 &&
	    abs(XYPar2) > 1000 &&
	    abs(RZPar0) < 10 &&
	    abs(RZPar1) < 999 &&
	    abs(RZPar2) < 0.005
            &&  sqrt(-TMath::Log(TMath::BinomialI(0.07, SubHits, SatSubHits))) >2	 
	     ) ) continue;
	
        float Significance = sqrt(-TMath::Log(TMath::BinomialI(0.07, SubHits, SatSubHits))) ;
        if (Significance > 29) Significance = 29;
        
        PointsSorted.push_back(pair<float,float>(Significance, seedFrac));
    }
    
    int LowEdgeX, LowEdgeY;
    
    if(Unblind >= 2){
        LowEdgeX = 999;
        LowEdgeY = 999;
    }else if(Unblind == 1){
        LowEdgeX = x[2];
        LowEdgeY = y[2];
    }else{
        LowEdgeX = x[1];
        LowEdgeY = y[1];
    }
    
    for(int i=LowEdgeX+1; i<=x[3]+1; i++){
        for(int j=LowEdgeY+1; j<=y[3]+1; j++){
            Plot->SetBinContent(i, j, 0);
        }
    }
    
    float a[10];
    
    a[7]=Plot->Integral(x[0]+1, x[1], y[2]+1, y[3]);
    a[4]=Plot->Integral(x[0]+1, x[1], y[1]+1, y[2]);
    a[1]=Plot->Integral(x[0]+1, x[1], y[0]+1, y[1]);
    a[2]=Plot->Integral(x[1]+1, x[2], y[0]+1, y[1]);
    a[3]=Plot->Integral(x[2]+1, x[3], y[0]+1, y[1]);
    a[8]=Plot->Integral(x[1]+1, x[2], y[2]+1, y[3]);
    a[5]=Plot->Integral(x[1]+1, x[2], y[1]+1, y[2]);
    a[6]=Plot->Integral(x[2]+1, x[3], y[1]+1, y[2]);
    a[9]=Plot->Integral(x[2]+1, x[3], y[2]+1, y[3]);
    
    for(int i=1; i<=9; i++){
        Actual->SetBinContent( ((i-1)%3)+1, (i-1)/3+1, a[i]);
    }
    Expected->SetBinContent(2, 3, (a[2]+1)*(a[7]+1)/(a[1]+1));
    Expected->SetBinError(2, 3, Expected->GetBinContent(2,3)*sqrt(/*1/Expected->GetBinContent(2,3) +*/ 1/(a[2]+1) + 1/(a[7]+1) + 1/(a[1]+1)) );
    Expected->SetBinContent(2, 2, (a[2]+1)*(a[4]+1)/(a[1]+1));
    Expected->SetBinError(2, 2, Expected->GetBinContent(2,2)*sqrt(/*1/Expected->GetBinContent(2,2) +*/ 1/(a[2]+1) + 1/(a[4]+1) + 1/(a[1]+1)) );
    Expected->SetBinContent(3, 2, (a[3]+1)*(a[4]+1)/(a[1]+1));
    Expected->SetBinError(3, 2, Expected->GetBinContent(3,2)*sqrt(/*1/Expected->GetBinContent(3,2) +*/ 1/(a[3]+1) + 1/(a[4]+1) + 1/(a[1]+1)) );
    Expected->SetBinContent(3, 3, (a[3]+1)*(a[7]+1)/(a[1]+1));
    Expected->SetBinError(3, 3, Expected->GetBinContent(3,3)*sqrt(/*1/Expected->GetBinContent(3,3) +*/ 1/(a[3]+1) + 1/(a[7]+1) + 1/(a[1]+1)) );
    if(Unblind > 0){
        Expected->SetBinContent(3, 3, (a[3]+a[6]+1)*(a[7]+a[8]+1)/(a[1]+a[2]+a[4]+a[5]+1));
        Expected->SetBinError(3, 3, Expected->GetBinContent(3,3)*sqrt(/*1/Expected->GetBinContent(3,3) +*/ 1/(a[3]+a[6]+1) + 1/(a[7]+a[8]+1) + 1/(a[1]+a[2]+a[4]+a[5]+1)) );
    }
    
    cout << "\t\tExpect\tActual" << endl;
    
    cout << "Region 7:\t\t" << a[7] << endl;
    cout << "Region 4:\t\t" << a[4] << endl;
    cout << "Region 1:\t\t" << a[1] << endl;
    cout << "Region 2:\t\t" << a[2] << endl;
    cout << "Region 3:\t\t" << a[3] << endl;
    
    cout << "Region 8:\t" << a[2]*a[7]/a[1] << '\t' << a[8] << endl;
    cout << "Region 5:\t" << a[2]*a[4]/a[1] << '\t' << a[5] << endl;
    cout << "Region 6:\t" << a[3]*a[4]/a[1] << '\t' << a[6] << endl;
    
    if(Unblind==0)
        cout << "Region 9:\t" << a[3]*a[7]/a[1] << '\t' << a[9] << endl;
    else{
        cout << "Region 9:\t" << (a[3]+a[6])*(a[7]+a[8])/(a[1]+a[2]+a[4]+a[5]) << '\t' << a[9] << endl;
        Expected->SetBinContent(3, 3, (a[3]+a[6])*(a[7]+a[8])/(a[1]+a[2]+a[4]+a[5]));
    }
    
    Plot->SetStats(0);
    Plot->SetLineColor(51);
    Plot->SetFillColor(51);
    Actual->SetMarkerColor(kBlack);
    Actual->SetLineColor(kBlack);
    Actual->SetMarkerSize(1.5);
    Expected->SetMarkerColor(kRed);
    Expected->SetLineColor(kRed);
    Expected->SetMarkerSize(1.5);
    
    //gStyle->SetPaintTextFormat(".3g");
    Plot->Draw("col");
    Actual->Draw("same text");
    Expected->Draw("same text e");
    
    TLegend *Legend=c1->BuildLegend(.15, .67, .36, .88);
    Legend->SetFillColor(kWhite);
    Legend->Draw();
    
    TLine *l1=new TLine(xbins[0], ybins[1], xbins[3], ybins[1]);
    TLine *l2=new TLine(xbins[0], ybins[2], xbins[3], ybins[2]);
    TLine *l3=new TLine(xbins[1], ybins[0], xbins[1], ybins[3]);
    TLine *l4=new TLine(xbins[2], ybins[0], xbins[2], ybins[3]);
    
    l1->SetLineStyle(2); l2->SetLineStyle(2); l3->SetLineStyle(2); l4->SetLineStyle(2);
    l1->Draw(); l2->Draw(); l3->Draw(); l4->Draw();
    
    return Plot;
}

